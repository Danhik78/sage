
def G(k):
    if k == 3:
        return x^4 + 36*x^3 + 270*x^2 - x*y + 756*x + 729
    elif k == 5:
        return x^6 + 30*x^5 + 315*x^4 + 1300*x^3 + 1575*x^2 - x*y + 750*x + 125
    elif k == 7:
        return x^8 + 28*x^7 + 322*x^6 + 1904*x^5 + 5915*x^4 + 8624*x^3 + 4018*x^2 - x*y + 748*x + 49
    elif k == 11:
        return x^12 - 5940*x^11 + 14701434*x^10 - 139755*x^9*y - 19264518900*x^9 + 723797800*x^8*y + 13849401061815*x^8 + 67496*x^7*y^2 - 1327909897380*x^7*y - 4875351166521000*x^7 + 2291468355*x^6*y^2 + 1036871615940600*x^6*y + 400050977713074380*x^6 - 5346*x^5*y^3 + 4231762569540*x^5*y^2 - 310557763459301490*x^5*y + 122471154456433615800*x^5 + 161201040*x^4*y^3 + 755793774757450*x^4*y^2 + 17309546645642506200*x^4*y + 6513391734069824031615*x^4 + 132*x^3*y^4 - 49836805205*x^3*y^3 + 6941543075967060*x^3*y^2 - 64815179429761398660*x^3*y + 104264884483130180036700*x^3 + 468754*x^2*y^4 + 51801406800*x^2*y^3 + 214437541826475*x^2*y^2 + 77380735840203400*x^2*y + 804140494949359194*x^2 - x*y^5 + 3732*x*y^4 - 4586706*x*y^3 + 2059075976*x*y^2 - 253478654715*x*y + 2067305393340*x + 1771561
    elif k == 13:
        return x^14 + 26*x^13 + 325*x^12 + 2548*x^11 + 13832*x^10 + 54340*x^9 + 157118*x^8 + 333580*x^7 + 509366*x^6 + 534820*x^5 + 354536*x^4 + 124852*x^3 + 15145*x^2 - x*y + 746*x + 13
    elif k == 17:
        return x**18 + 510*x**17 + 125001*x**16 + 19248080*x**15 + 2058738420*x**14 + 10846*x**13*y + 160172066760*x**13 + 6027384*x**12*y + 9242645403716*x**12 + 1273189500*x**11*y + 396142696578480*x**11 + 149639194520*x**10*y + 12417332467452654*x**10 - 2601*x**9*y**2 + 10935992495298*x**9*y + 274068816038694900*x**9 + 13895953*x**8*y**2 + 512956753613040*x**8*y + 3930522394593478542*x**8 - 6334200306*x**7*y**2 + 15050663748715720*x**7*y + 29822585665567020720*x**7 + 582813995247*x**6*y**2 + 249498731117744880*x**6*y + 25265814014664728452*x**6 + 102*x**5*y**3 - 12771700921226*x**5*y**2 + 1855481229180865218*x**5*y - 782798617139667376440*x**5 + 304164*x**4*y**3 + 57276026369631*x**4*y**2 + 3208047335393719960*x**4*y + 1674871156833326914740*x**4 + 14192620*x**3*y**3 - 30176599785714*x**3*y**2 + 527256473998693500*x**3*y - 1020930937750503845680*x**3 + 13396068*x**2*y**3 + 281395910081*x**2*y**2 + 249471554573688*x**2*y + 5170904888984217*x**2 - x*y**4 + 2982*x*y**3 - 2547081*x*y**2 + 567877726*x*y - 8730057090*x + 4913  


def IsoStep(A1, B1, g, l):
    # Вход: коэффициенты кривой, корень эквивалентного многочлена, степень изогении.
    # Выход: [{j, A2, B2}, многочлен Элкиса]

    # Определение символьных переменных
    
    j = F(1728*4*A1^3*~F(4*A1^3+27*B1^2))
    # Начало алгоритма
    E41 = F(-1*~F(3)*A1)
    E61 = F(-1*~F(2)*B1)
    d1 = F(1*~F(1728)*(E41^3-E61^2))
    d2 = F(~F(l)^(12)*d1*g^(12*~F(s[l])))  
    DF = F(g*diff(G(l),x)(x=g,y=j))
    DJ = F(j*diff(G(l),y)(x=g,y=j))
    E2Z = F(-12*~F(s[l])*E61*DJ*~F(E41*DF))
    E01 = F(E61*~F(E41*E2Z))
    gd = F(-s[l]*~F(12)*E2Z*g)
    j1d = F(-E41^2*E61*~F(d1))
    DFd = F(gd * diff(G(l),x)(x=g,y=j) + g*(gd*diff(G(l),x,x)+j1d * diff(G(l),x,y))(x=g,y=j))
    DJd = F(j1d * diff(G(l),y)(x=g,y=j) + j*(j1d*diff(G(l),y,y)+gd * diff(G(l),y,x))(x=g,y=j))
    E01d = F((-s[l]*~F(12)*DFd - E01*DJd) * ~F(DJ))
    E42 = F(~F(l)^2*(E41-E2Z*(12*E01d*~F(E01)+6*E41^2*~F(E61)-4*E61*~F(E41))+E2Z^2))
    j22 = F(E42^3*~F(d2))
    f0 = F(l^s[l]*~F(g))
    fd = F(s[l]*~F(12)*E2Z*f0)
    DF2 = F(diff(G(l),x)(x=f0,y=j22))
    DJ2 = F(diff(G(l),y)(x=f0,y=j22))
    j22d = F(-1*~F(l) * fd * DF2 *~F(DJ2))
    E62 = F(-E42*j22d*~F(j22))
    A2 = F(-3*l^4*E42)
    B2 = F(-2*l^6*E62)
    P1 = F(-l*~F(2)*E2Z)
    #вычисление полинома
    return [A2,B2]

def chooseDirection(i,j,r1,r2,r3,ex = [],example=False):
    if example == False:
        raise "Not impliced yet"
    if ex[i][j] == 1:
        return r1
    elif ex[i][j] ==2:
        return r2
    else:
        return r3
ex1 = [[1],[2,2,1,2,1,1,1,2,1],[1,2,1,1,2],[1,2,2,1,2,1,1,1],[1,2,1,2,2,2],[2,2,1,1]] 
ex2 = [[2,2],[2,1,2,2,2,2,2],[1,2,1],[],[2,1],[1,2,2,1,2]]
ex3 = [[1,1],[1,2,2,2,1,1,2],[2,1,2],[],[2,2],[1,2,1,1,2]]
ex4 = [[2],[2,1,1,2,1,1,1,2,1],[2,2,2,2,1],[1,2,2,1,1,1,2,2],[2,2,2,1,1,1],[2,2,1,2]] 


def c(k,a,b,F):
    if k ==1:
        return F(-a*~F(5))
    elif k ==2:
        return F(-b*~F(7))
    else:
        res = F(0)
        for i in range(1,k-2):
            res+=c(i,a,b,F)*c(k-1-i,a,b,F)
        return F(3*~F((k-2)*(2*k+3)) *res)

    
def IsoWalk(E,p,L,Path,ex = []):
    A = E.a4()
    B=E.a6()
    F = FiniteField(m)
    F_2 = FiniteField(m)
    R.<x,y> = PolynomialRing(F,2)
    Lol.<z> = PolynomialRing(F_2)
    for i in range(len(Path)):
        for j in range(Path[i]):
            E_ = EllipticCurve(F,[A,B])
            j_inv = E_.j_invariant()
            ro = (G(L[i]).subs(x=z,y=j_inv)).factor()
            rog1 = m - ro[0][0](z=0)
            rog2 = m- ro[1][0](z=0)
            if len(ro)>2:
                rog3 = m - ro[2][0](z=0)
            else: rog3 = 0
            rog1 = chooseDirection(i,j,rog1,rog2,rog3,ex = ex,example=True)
            A,B= IsoStep(A,B,rog1,L[i])
    return [A,B]
    
    

s = {3:6, 5:3, 7:2, 11:6, 13:1, 17:3}
# Пример использования системы
A1 = 840697433
B1 = 1239823203
F = FiniteField(m)
m = 2038074743
E = EllipticCurve(F,[A1,B1])
j = E.j_invariant()
L=[3, 5, 7,11,13,17]
W = [1,9,5,8,6,4]
Q = EllipticCurve(F,IsoWalk(E,m,L,W,ex1))
#Шифрование
M = 1234567890
R= [2,7,3,0,2,5]
Qr = EllipticCurve(F,IsoWalk(Q,m,L,R,ex2))
j_Qr = Qr.j_invariant()
S = F(M*j_Qr)
Er = EllipticCurve(F,IsoWalk(E,m,L,R,ex3))
#Расшифрование
Qr_ = EllipticCurve(F,IsoWalk(Er,m,L,W,ex4))
M = F(S *~F(Qr_.j_invariant()))
print(M)





